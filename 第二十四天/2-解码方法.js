// 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
// "1" -> 'A'
// "2" -> 'B'
// ...
// "25" -> 'Y'
// "26" -> 'Z'
// 然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。
// 例如，"11106" 可以映射为：
// "AAJF" ，将消息分组为 (1, 1, 10, 6)
// "KJF" ，将消息分组为 (11, 10, 6)
// 消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。
// 注意，可能存在无法解码的字符串。
// 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。如果没有合法的方式解码整个字符串，返回 0。
// 题目数据保证答案肯定是一个 32 位 的整数。

// 题目要求统计字符串 s 的所有有效解码方式数。每个数字可以解码成一个或两个字符（只要满足规则）。
// 我们使用动态规划数组 dp[i] 表示前 i 个字符的解码方法总数。
// 🧠 状态定义：
// dp[i] 表示 s[0...i-1] 这一段（前 i 个字符）的解码总数。
// 初始化：
// dp[0] = 1：空字符串解法为 1 种。
// dp[1] = 1（前提是第一个字符不是 '0'，否则直接返回 0）。
// ✅ 状态转移：
// 如果 s[i-1] != '0'，说明当前字符可以单独解码，则 dp[i] += dp[i-1]。
// 如果 s[i-2]s[i-1] 组成的两位数在 10 ~ 26 之间，则可以组合解码，则 dp[i] += dp[i-2]。

// 示例 1：
// 输入：s = "12"
// 输出：2
// 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
// 示例 2：
// 输入：s = "226"
// 输出：3
// 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
// 示例 3：
// 输入：s = "06"
// 输出：0
// 解释："06" 无法映射到 "F" ，因为存在前导零（"6" 和 "06" 并不等价）。

// const s = "12";
// 129 12 9  1 2 9
const s = "226";
var numDecodings = function (s) {
  const n = s.length;
  if (n === 0 || s[0] === "0") return 0; // 开头不能为0

  const dp = new Array(n + 1).fill(0);
  dp[0] = 1; // 空串的解码方式为1
  dp[1] = 1; // 非0开头的字符串，长度为1时解码方式为1
  //     2   22/2 2  2 26/22 6/2 2 6
  //1    1     2            3
  debugger;
  for (let i = 2; i <= n; i++) {
    const oneDigit = s[i - 1]; // 当前一位（字符）
    const twoDigits = s.slice(i - 2, i); // 当前两位（字符串）
    // 如果当前一位不是 '0'，可以单独解码，加上前一个状态
    if (oneDigit !== "0") {
      dp[i] += dp[i - 1];
    }
    // 如果两位组合在10到26之间，也可以解码，加上前前个状态
    if (twoDigits >= "10" && twoDigits <= "26") {
      dp[i] += dp[i - 2];
    }
  }
  return dp[n]; // dp[n] 表示整个字符串的解码总数
};

console.log(numDecodings(s));
